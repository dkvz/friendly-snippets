{
  "Attribute using recommended pattern": {
    "prefix": "attribute",
    "body": [
      "[System.AttributeUsage(System.AttributeTargets.${1:All}, Inherited = ${2:false}, AllowMultiple = ${3:true})]",
      "sealed class ${4:My}Attribute : System.Attribute",
      "{",
      "    // See the attribute guidelines at",
      "    //  http://go.microsoft.com/fwlink/?LinkId=85236",
      "    readonly string positionalString;",
      "    ",
      "    // This is a positional argument",
      "    public ${4:My}Attribute(string positionalString)",
      "    {",
      "        this.positionalString = positionalString;",
      "        ",
      "        // TODO: Implement code here",
      "        ${5:throw new System.NotImplementedException();}",
      "    }",
      "    ",
      "    public string PositionalString",
      "    {",
      "        get { return positionalString; }",
      "    }",
      "    ",
      "    // This is a named argument",
      "    public int NamedInt { get; set; }",
      "}"
    ],
    "description": "Attribute using recommended pattern"
  },
  "Checked block": {
    "prefix": "checked",
    "body": [
      "checked",
      "{",
      "    $0",
      "}"
    ],
    "description": "Checked block"
  },
  "Console.WriteLine": {
    "prefix": "cw",
    "body": [
      "Console.WriteLine($0);"
    ],
    "description": "Console.WriteLine"
  },
  "Console.ReadLine": {
    "prefix": "cr",
    "body": [
      "Console.ReadLine($0);"
    ],
    "description": "Console.ReadLine"
  },
  "Implementing Equals() according to guidelines": {
    "prefix": "equals",
    "body": [
      "// override object.Equals",
      "public override bool Equals(object obj)",
      "{",
      "    //",
      "    // See the full list of guidelines at",
      "    //   http://go.microsoft.com/fwlink/?LinkID=85237",
      "    // and also the guidance for operator== at",
      "    //   http://go.microsoft.com/fwlink/?LinkId=85238",
      "    //",
      "    ",
      "    if (obj == null || GetType() != obj.GetType())",
      "    {",
      "        return false;",
      "    }",
      "    ",
      "    // TODO: write your implementation of Equals() here",
      "    ${1:throw new System.NotImplementedException();}",
      "    return base.Equals (obj);",
      "}",
      "",
      "// override object.GetHashCode",
      "public override int GetHashCode()",
      "{",
      "    // TODO: write your implementation of GetHashCode() here",
      "    ${2:throw new System.NotImplementedException();}",
      "    return base.GetHashCode();",
      "}"
    ],
    "description": "Implementing Equals() according to guidelines"
  },
  "Exception": {
    "prefix": "exception",
    "body": [
      "[System.Serializable]",
      "public class ${1:My}Exception : ${2:System.Exception}",
      "{",
      "    public ${1:My}Exception() { }",
      "    public ${1:My}Exception(string message) : base(message) { }",
      "    public ${1:My}Exception(string message, System.Exception inner) : base(message, inner) { }",
      "    protected ${1:My}Exception(",
      "        System.Runtime.Serialization.SerializationInfo info,",
      "        System.Runtime.Serialization.StreamingContext context) : base(info, context) { }",
      "}"
    ],
    "description": "Exception"
  },
  "Foreach statement": {
    "prefix": "foreach",
    "body": [
      "foreach (${1:var} ${2:item} in ${3:collection})",
      "{",
      "    $0",
      "}"
    ],
    "description": "Foreach statement"
  },
  "Safely invoking an event": {
    "prefix": "invoke",
    "body": [
      "${1:EventHandler} temp = ${2:MyEvent};",
      "if (temp != null)",
      "{",
      "    temp($0);",
      "}"
    ],
    "description": "Safely invoking an event"
  },
  "Simple iterator": {
    "prefix": "iterator",
    "body": [
      "public System.Collections.Generic.IEnumerator<${1:ElementType}> GetEnumerator()",
      "{",
      "    $0throw new System.NotImplementedException();",
      "    yield return default(${1:ElementType});",
      "}"
    ],
    "description": "Simple iterator"
  },
  "MessageBox.Show": {
    "prefix": "mbox",
    "body": [
      "System.Windows.Forms.MessageBox.Show(\"${1:Text}\");$0"
    ],
    "description": "MessageBox.Show"
  },
  "Property and backing field": {
    "prefix": "propfull",
    "body": [
      "private ${1:int} ${2:myVar};",
      "public ${1:int} ${3:MyProperty}",
      "{",
      "    get { return ${2:myVar}; }",
      "    set { ${2:myVar} = value; }",
      "}",
      "$0"
    ],
    "description": "Property and backing field"
  },
  "propg": {
    "prefix": "propg",
    "body": [
      "public ${1:int} ${2:MyProperty} { get; private set; }$0"
    ],
    "description": "An automatically implemented property with a 'get' accessor and a private 'set' accessor. C# 3.0 or higher"
  },
  "prop": {
    "prefix": "prop",
    "body": [
      "public ${1:int} ${2:MyProperty} { get; set; }$0"
    ],
    "description": "An automatically implemented property. C# 3.0 or higher"
  },
  "Switch statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:switch_on})",
      "{",
      "    $0",
      "    default:",
      "}"
    ],
    "description": "Switch statement"
  },
  "Try finally": {
    "prefix": "tryf",
    "body": [
      "try",
      "{",
      "    $1",
      "}",
      "finally",
      "{",
      "    $0",
      "}"
    ],
    "description": "Try finally"
  },
  "Try catch": {
    "prefix": "try",
    "body": [
      "try",
      "{",
      "    $1",
      "}",
      "catch (${2:System.Exception})",
      "{",
      "    $0",
      "    throw;",
      "}"
    ],
    "description": "Try catch"
  },
  "constructor": {
    "prefix": "ctor",
    "body": [
      "${1:public} ${2:$TM_FILENAME_BASE}(${3:Parameters})",
      "{",
      "    $0",
      "}"
    ],
    "description": "constructor"
  },
  "xUnit Test": {
    "prefix": "fact",
    "body": [
      "[Fact]",
      "public void ${1:TestName}()",
      "{",
      "//Given",
      "",
      "//When",
      "",
      "//Then",
      "}$0"
    ],
    "description": "create xunit test method"
  }
}
