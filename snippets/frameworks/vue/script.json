{
  "defineProps": {
    "prefix": "defineProps",
    "body": [
      "const props = defineProps({",
      "\t$0",
      "});"
    ],
    "description": "A list/hash of attributes that are exposed to accept data from the parent component. "
  },
  "defineProps-TS": {
    "prefix": "definePropsTS",
    "body": [
      "const props = defineProps<{",
      "\t$0",
      "}>()"
    ],
    "description": "A list/hash of attributes that are exposed to accept data from the parent component. "
  },
  "defineEmits": {
    "prefix": "defineEmits",
    "body": [
      "const ${1:emit} = defineEmits([ $0 ]);"
    ],
    "description": "A list of events that componetnt can emits to the parent component. "
  },
  "defineEmits-TS": {
    "prefix": "defineEmitsTS",
    "body": [
      "const ${1:emit} = defineEmits<{",
      "\t(e: '${2:event}', ${3:id}: ${4:type}: ${5:type}) ",
      "\t$0",
      "}>()"
    ],
    "description": "A list of events that componetnt can emits to the parent component. "
  },
  "defineEmits-TS-tuple": {
    "prefix": "defineEmitsTStuple",
    "body": [
      "const ${1:emit} = defineEmits<{",
      "\t${2:event}: [${3:id}: ${4:type}]",
      "\t$0",
      "}>()"
    ],
    "description": "(3.3+: alternative, more succinct syntax) a list of events that componetnt can emits to the parent component. "
  },
  "defineComponent": {
    "prefix": "defineComponent",
    "body": [
      "const $1 = defineComponent({",
      "\t$0",
      "})"
    ],
    "description": "create a component vue component"
  },
  "defineAsyncComponent": {
    "prefix": "defineAsyncComponent",
    "body": [
      "const $1 = defineAsyncComponent(() =>",
      "\timport('$0')",
      ");"
    ],
    "description": "create a async vue component"
  },
  "defineCustomElement": {
    "prefix": "defineCustomElement",
    "body": [
      "const $1 = defineCustomElement({",
      "\t$0",
      "})"
    ],
    "description": "create a custom element vue"
  },
  "computed-composition": {
    "prefix": "computedVue",
    "body": [
      "const $1 = computed(() => {",
      "\t$0",
      "});"
    ],
    "description": "Computed properties to be mixed into the Vue instance. "
  },
  "computed-composition-ts": {
    "prefix": "computedVueTS",
    "body": [
      "const $1 = computed<${2:type}>(() => {",
      "\t$0",
      "});"
    ],
    "description": "Computed properties to be mixed into the Vue instance. "
  },
  "reactive-composition": {
    "prefix": "reactiveVue",
    "body": [
      "const $1 = reactive({",
      "\t$0",
      "})"
    ],
    "description": "Reactive properties to be mixed into the Vue instance. "
  },
  "reactive-composition-ts": {
    "prefix": "reactiveVueTS",
    "body": [
      "interface $1 {",
      "\t${2:property}: ${3:type}",
      "}",
      "",
      "const $4:${5:type} = reactive({",
      "\t$0",
      "})"
    ],
    "description": "Reactive properties to be mixed into the Vue instance. "
  },
  "shallow-reactive-composition": {
    "prefix": "shallowReactive",
    "body": [
      "const ${1:state} = shallowReactive({",
      "\t$0",
      "})"
    ],
    "description": "Shallow version of reactive(). Use with Caution !! Shallow data structures should only be used for root level state in a component. Avoid nesting it inside a deep reactive object as it creates a tree with inconsistent reactivity behavior which can be difficult to understand and debug."
  },
  "shallowReadonly": {
    "prefix": "shallowReadonly",
    "body": [
      "const ${1:state} = shallowReadonly({",
      "\t$0",
      "})"
    ],
    "description": "Shallow version of readonly(). Use with Caution !! Shallow data structures should only be used for root level state in a component. Avoid nesting it inside a deep reactive object as it creates a tree with inconsistent reactivity behavior which can be difficult to understand and debug."
  },
  "ref-composition": {
    "prefix": "refVue",
    "body": [
      "const $1 = ref($2)",
      "$0"
    ],
    "description": "Ref properties to be mixed into the Vue instance. "
  },
  "ref-composition-ts": {
    "prefix": "refVueTS",
    "body": [
      "const $3 = ref<${2:type}>($1)",
      "$0"
    ],
    "description": "Ref properties to be mixed into the Vue instance. "
  },
  "template-ref-ts-composition": {
    "prefix": "trfVue",
    "body": [
      "const $0 = ref<HTMLInputElement | null>(null)"
    ],
    "description": "Template ref to be mixed into the Vue instance. "
  },
  "component-ref-ts-composition": {
    "prefix": "crfVue",
    "body": [
      "const $1 = ref<InstanceType<typeof $0> | null>(null)"
    ],
    "description": "Template ref to be mixed into the Vue instance. "
  },
  "watch": {
    "prefix": "watch",
    "body": [
      "watch($1, ($2, $3) => {",
      "$0",
      "});"
    ],
    "description": "Watch over a reactive source and call a function in reaction to state changes "
  },
  "onBeforeMount": {
    "prefix": "onBeforeMount",
    "body": [
      "onBeforeMount(() => {$0})"
    ],
    "description": "Vue before mount composition lifecycle hook"
  },
  "onMounted": {
    "prefix": "onmounted",
    "body": [
      "onMounted(() => {$0})"
    ],
    "description": "Vue mounted lifecycle hook"
  },
  "onBeforeUnmount": {
    "prefix": "onBeforeUnmount",
    "body": [
      "onBeforeUnmount(() => {$0})"
    ],
    "description": "Vue before unmount composition lifecycle hook"
  },
  "onUnmounted": {
    "prefix": "onunmounted",
    "body": [
      "onUnmounted(() => {$0})"
    ],
    "description": "Vue unMounted lifecycle hook"
  },
  "beforeUpdate": {
    "prefix": "beforeUpdate",
    "body": [
      "beforeUpdate() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "updated": {
    "prefix": "updated",
    "body": [
      "updated() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "onBeforeUpdate": {
    "prefix": "onBeforeUpdate",
    "body": [
      "onBeforeUpdate(() => {$0})"
    ],
    "description": "Vue before update composition lifecycle hook"
  },
  "onUpdated-composition": {
    "prefix": "onupdated",
    "body": [
      "onUpdated(() => {$0})"
    ],
    "description": "Vue updated lifecycle hook"
  },
  "activated": {
    "prefix": "activated",
    "body": [
      "activated() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "deactivated": {
    "prefix": "deactivated",
    "body": [
      "deactivated() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "onActivated-composition": {
    "prefix": "onActivated",
    "body": [
      "onActivated(() => {$0})"
    ],
    "description": "Vue activated composition lifecycle hook"
  },
  "onDeactivated-composition": {
    "prefix": "onDeactivated",
    "body": [
      "onDeactivated(() => {$0})"
    ],
    "description": "Vue deactivated composition lifecycle hook"
  },
  "beforeDestroy": {
    "prefix": "beforeDestroy",
    "body": [
      "beforeDestroy() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "destroyed": {
    "prefix": "destroyed",
    "body": [
      "destroyed() {",
      "\t$1",
      "},"
    ],
    "description": "Type: Function."
  },
  "useRouter-composition": {
    "prefix": "useRouter",
    "body": [
      "const ${1:router} = useRouter()"
    ],
    "description": "const router = useRouter()"
  },
  "useRoute-composition": {
    "prefix": "useRoute",
    "body": [
      "const ${1:route} = useRoute()"
    ],
    "description": "const route = useRoute()"
  },
  "beforeEnter": {
    "prefix": "beforeEnter",
    "body": [
      "beforeEnter: (to, from, next) => {",
      "\t${0:// ...}",
      "}"
    ],
    "description": "beforeEnter: (to, from, next) => { }"
  },
  "beforeRouteEnter": {
    "prefix": "beforeRouteEnter",
    "body": [
      "beforeRouteEnter (to, from, next) {",
      "\t${0:// ...}",
      "}"
    ],
    "description": "beforeRouteEnter (to, from, next) { }"
  },
  "beforeRouteLeave": {
    "prefix": "beforeRouteLeave",
    "body": [
      "beforeRouteLeave (to, from, next) {",
      "\t${0:// ...}",
      "}"
    ],
    "description": "beforeRouteLeave (to, from, next) { }"
  }
}
